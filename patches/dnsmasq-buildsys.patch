From bb692e640149cf40b8e1e671026c79666ed6db55 Mon Sep 17 00:00:00 2001
From: "Owen W. Taylor" <otaylor@fishsoup.net>
Date: Mon, 14 Apr 2014 10:46:19 -0700
Subject: [PATCH] Add a configure script to provide a standard build API

Even though dnsmasq doesn't need checks at configure time, a
configure script with standard options provides useful compatibility
with automated build systems. Add such a script that generates a
wrapper makefile in the build directory. Making this work without
a separate builddir is difficult without requiring GNUmake and using
includes.
---
 configure | 101 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 101 insertions(+)
 create mode 100755 configure

diff --git a/configure b/configure
new file mode 100755
index 0000000..5ebd15a
--- /dev/null
+++ b/configure
@@ -0,0 +1,101 @@
+#!/bin/sh
+
+# This script provides basic compatibility with automake configure scripts
+# for use in automated build systems. See:
+#
+# https://people.gnome.org/~walters/docs/build-api.txt
+
+# We only work buildir != srcdir ; fixing this would require requiring
+# GNUmake so we could use an include rather than a wrapper script
+#buildapi-variable-require-builddir
+
+topdir=`dirname $0`
+
+if [ "`cd $topdir && pwd`" = "`pwd`" ] ; then
+    echo 1>&2 "A separate builddir is required"
+    exit 1
+fi
+
+print_help() {
+    echo "--prefix=DIR		Install files in DIR (default /usr)"
+    echo "--sbindir=DIR		Install files in DIR (default PREFIX/sbin)"
+    echo "--datadir=DIR		Install data files in DIR (default PREFIX/share)"
+    echo "--mandir=DIR		Install man pages in DIR (default DATADIR/man)"
+    echo "--localedir=DIR	Install translations in DIR (default DATADIR/locale)"
+}
+
+prefix=/usr
+if expr "$topdir" : / > /dev/null ; then
+    makeargs="topdir=$topdir"
+else
+    makeargs='topdir=$(CURDIR)'/"$topdir"
+fi
+
+makeargs="$makeargs"' BUILDDIR=$(CURDIR)'
+
+while [ $# '>' 0 ] ; do
+    option=`expr "$1" : '\([^=]*\)='`
+    optarg=
+    consume_next=false
+    if [ x$option != x ]; then
+        optarg=`expr "$1" : '[^=]*=\(.*\)'`
+        shift
+    else
+        option=$1
+        shift
+        if expr "$option" : '-' > /dev/null ; then
+            consume_next=true
+            optarg=$1
+        fi
+    fi
+
+    case $option in
+        --prefix)
+            makeargs="$makeargs PREFIX='$optarg'"
+            ;;
+        --sbindir)
+            makeargs="$makeargs BINDIR='$optarg'"
+            ;;
+        --datadir)
+            makeargs="$makeargs DATADIR='$optarg'"
+            ;;
+        --mandir)
+            makeargs="$makeargs MANDIR='$optarg'"
+            ;;
+        --localedir)
+            makeargs="$makeargs LOCALEDIR='$optarg'"
+            ;;
+        CFLAGS)
+            makeargs="$makeargs CFLAGS='$optarg'"
+            ;;
+        --with-*|--without-*|--enable-*|--disable-*)
+            consume_next=false
+            ;;
+        --help)
+            print_help
+            exit
+            ;;
+    esac
+
+    if $consume_next ; then
+        shift
+    fi
+done
+
+output_var() {
+    if [ x"$2" != x"" ] ; then
+        echo $1 ?= $2
+    fi
+}
+
+cat > Makefile <<EOF
+MAKEARGS = -C $topdir $makeargs
+all:
+	\$(MAKE) \$(MAKEARGS) all
+
+install:
+	\$(MAKE) \$(MAKEARGS) install
+
+clean:
+	\$(MAKE) \$(MAKEARGS) clean
+EOF
-- 
1.9.0

